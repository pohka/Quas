class Comp{constructor(data){this.data=data}
addChild(child,sel,before){if(this.data.children===undefined){this.data.children=[]}
switch(sel){case undefined:this.data.children.push(child);break;case "first":this.data.children.splice(0,0,child);break;default:let ch=sel.charAt(0);let str=sel.substr(1);let key;let isData=!1;switch(ch){case "#":key="id";break;case ".":key="class";break;default:let a=sel.split(":");key=a[0];str=a[1];isData=!0;break}
for(let i=0;i<this.data.children.length;i++){let c;if(!isData){c=this.data.children[i]}
else{c=this.data.children[i].data}
if(c!=undefined&&c[key]!==undefined&&c[key]===str){if(!before)i++;this.data.children.splice(i,0,child);return}}
this.data.children.push(child)}}
render(sel,type){let el;if(sel.constructor!==String)
el=sel;else el=Quas.sel(sel);Quas.addEl(el,this.data,type)}}
class Element{constructor(el){this.el=el}
active(state){let a="active";if(state===undefined){state=!this.hasCls(a)}
if(state)this.addCls(a);else this.delCls(a)}
addChild(data,type){if(type===undefined)
type="append";let c=new Comp(data);c.render(this.el,type)}
addCls(cls){this.el.className+=" "+cls}
attr(key,val){if(val!==undefined){this.el.setAttribute(key,val)}
else{let a=this.el.getAttribute(key);if(a!=null)
return a;return undefined}}
data(key,val){return this.attr("data-"+key,val)}
del(){this.el.remove()}
delCls(cls){let arr=this.el.className.split(" ");let i=arr.length-1;let c="";while(i>-1){if(arr[i]!==cls)
c+=arr[i]+" ";i--}
this.el.className=c.slice(0,-1)}
hasCls(cls){let arr=this.el.className.split(" ");let i=arr.length;while(i>0){i--;if(arr[i]===cls)
return!0}
return!1}
prop(key,val){if(val===undefined){return this.el[key]}
else this.el[key]=val}
scrollTo(){window.scrollTo(0,this.el.offsetTop)}
text(){return this.el.textContent}
visible(show){let v=this.el.style.visibility;if(show===undefined){return(v===""||v==="visible")}
else{if(show){this.el.style.visibility="visible"}
else{this.el.style.visibility="hidden"}}}}
class Quas{static addEl(s,d,type){if(s===undefined){return}
let el=document.createElement(d.tag);if(d.txt!==undefined){let c=document.createTextNode(d.txt);el.appendChild(c)}
for(let key in d){if(key==="css"){let v="";for(let i in d.css){v+=i+":"+d.css[i]+";"}
el.setAttribute("style",v)}
else if(key==="on"){for(let evnt in d[key]){el.addEventListener(evnt,d[key][evnt])}}
else if(key==="data"){for(let i in d.data){el.setAttribute("data-"+i,d.data[i])}}
else if(key!=="txt"&&key!=="tag"&&key!=="children"){el.setAttribute(key,d[key])}}
if(type==="prepend"){let first=s.firstElementChild;if(first!==undefined){s.insertBefore(el,s.childNodes[0])}
else{s.appendChild(el)}}
else{if(type==="set"){s.innerHTML=""}
s.appendChild(el)}
if(d.children!==undefined){for(var i=0;i<d.children.length;i++){Quas.addEl(el,d.children[i])}}}
static ajax(req){var xmlhttp=new XMLHttpRequest();xmlhttp.onreadystatechange=function(){if(this.readyState==4&&this.status==200){if(req.success!==undefined)
req.success(this.responseText)}
else if(this.readyState==4){if(req.error!==undefined){req.error(this.statusText,this.status)}}};let str=req.url+"?";let i=0;for(let key in req.data){str+=key+"="+req.data[key]+"&"}
xmlhttp.open(req.type,str.slice(0,-1),!0);xmlhttp.send()}
static browser(){var ua=navigator.userAgent,tem,M=ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i)||[];if(/trident/i.test(M[1])){tem=/\brv[ :]+(\d+)/g.exec(ua)||[];return{name:'IE ',version:(tem[1]||'')}}
if(M[1]==='Chrome'){tem=ua.match(/\bOPR\/(\d+)/)
if(tem!=null){return{name:'Opera',version:tem[1]}}}
M=M[2]?[M[1],M[2]]:[navigator.appName,navigator.appVersion,'-?'];if((tem=ua.match(/version\/(\d+)/i))!=null){M.splice(1,1,tem[1])}
return{name:M[0],version:M[1],isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}}
static each(sel,callback){let els;if(sel.charAt(0)==="."){els=document.getElementsByClassName(sel.substr(1,sel.length-1))}
else{els=document.getElementsByTagName(sel)}
if(els.length>0){for(let i=0;i<els.length;i++){callback(new Element(els[i]))}}}
static genList(items){let list=[];for(let i in items){list.push({tag:"li",txt:items[i]})}
return list}
static genTable(headings,rows){let table=[];if(headings.length>0){let headingData={tag:"tr",children:[]}
for(let h in headings){headingData.children.push({tag:"th",txt:headings[h]})}
table.push(headingData)}
for(let r=0;r<rows.length;r++){let rowData={tag:"tr",children:[]};for(let i in rows[r]){rowData.children.push({tag:"td",txt:rows[r][i]})}
table.push(rowData)}
return table}
static getEl(sel){let el=Quas.sel(sel);if(el!=null)
return new Element(el)}
static getUrlValues(){let str=window.location.search;if(str.charAt(0)=="?"){str=str.substr(1,str.length-1)}
let variables=str.split("&");let data={};for(let i=0;i<variables.length;i++){if(variables[i]!==""){let item=variables[i].split("=");data[item[0]]=decodeURI(item[1])}}
return data}
static preventDefault(e){e=e||window.event;if(e.preventDefault)
e.preventDefault();e.returnValue=!1}
static preventDefaultForScrollKeys(e){if(Quas.scrollKeys[e.keyCode]){preventDefault(e);return!1}}
static scrollable(enabled){if(enabled===undefined){enabled=!Quas.isScrollable}
if(enabled){if(window.removeEventListener)
window.removeEventListener('DOMMouseScroll',Quas.preventDefault,!1);window.onmousewheel=document.onmousewheel=null;window.onwheel=null;window.ontouchmove=null;document.onkeydown=null}
else{if(window.addEventListener)
window.addEventListener('DOMMouseScroll',Quas.preventDefault,!1);window.onwheel=Quas.preventDefault;window.onmousewheel=document.onmousewheel=Quas.preventDefault;window.ontouchmove=Quas.preventDefault;document.onkeydown=Quas.preventDefaultForScrollKeys}
Quas.isScrollable=enabled}
static sel(str){let ch=str.charAt(0);if(ch==="."){let els=document.getElementsByClassName(str.substr(1,str.length-1));if(els.length>0)
return els[0]}
else if(ch==="#"){return document.getElementById(str.substr(1,str.length-1))}
else if(str==="html"){return document.documentElement}
else if(str==="body"){return document.body}
else{let els=document.getElementsByTagName(str);if(els.length>0)
return els[0]}}
static setUrlValues(newVals){let data=Quas.getUrlValues();for(let key in newVals){data[key]=encodeURI(newVals[key])}
let str="?";for(let key in data){if(data[key]!=="")
str+=key+"="+data[key]+"&"}
str=str.slice(0,-1);window.location=window.origin+window.location.pathname+str}}
Quas.isScrollable=!0;Quas.scrollKeys={37:1,38:1,39:1,40:1}
